{"name":"ddp.js","tagline":"Isomorphic JavaScript DDP client","body":"[![Build Status](https://travis-ci.org/mondora/ddp.js.svg?branch=master)](https://travis-ci.org/mondora/ddp.js)\r\n[![Coverage Status](https://coveralls.io/repos/mondora/ddp.js/badge.png)](https://coveralls.io/r/mondora/ddp.js)\r\n[![Code Climate](https://codeclimate.com/github/mondora/ddp.js.png)](https://codeclimate.com/github/mondora/ddp.js)\r\n\r\n#WARNING\r\nBreaking changes from 0.6.x to 1.0.0, [read the\r\nCHANGELOG](https://github.com/mondora/ddp.js/blob/master/CHANGELOG.md) for more\r\ninfo.\r\n\r\n#ddp.js\r\n\r\nA javascript isomorphic ddp client.\r\n\r\n##What is it for?\r\n\r\nThe purpose of this library is:\r\n\r\n- to set up and maintain a ddp connection with a ddp server, freeing the\r\n  developer from having to do it on their own\r\n- to give the developer a clear, consistent API to communicate with the ddp\r\n  server\r\n\r\n##Install\r\n\r\nVia npm\r\n\r\n    npm install ddp.js\r\n\r\nOr via bower\r\n\r\n    bower install ddp.js\r\n\r\n##Example usage\r\n\r\n```javascript\r\nvar DDP = require(\"ddp.js\");\r\nvar options = {\r\n    endpoint: \"http://localhost:3000/websocket\",\r\n    SocketConstructor: WebSocket\r\n};\r\nvar ddp = new DDP(options);\r\n\r\nddp.on(\"connected\", function () {\r\n    console.log(\"Connected\");\r\n\r\n    var subId = ddp.sub(\"myCollection\");\r\n    ddp.on(\"ready\", function (message) {\r\n        if (message.id === subId) {\r\n            console.log(\"Subscruption to myCollection ready\");\r\n        }\r\n    });\r\n    ddp.on(\"added\", function (message) {\r\n        console.log(message.collection);\r\n    });\r\n\r\n    var myLoginParams = {\r\n        user: {\r\n            email: \"user@example.com\"\r\n        },\r\n        password: \"hunter2\"\r\n    };\r\n    var methodId = ddp.method(\"login\", [myLoginParams]);\r\n    ddp.on(\"result\", function (message) {\r\n        if (message.id === methodId && !message.error) {\r\n            console.log(\"Logged in!\");\r\n        }\r\n    });\r\n});\r\n```\r\n\r\n##Tests\r\n\r\n`npm test` to run tests, `npm run coverage` to generate the coverage report.\r\n\r\n##Public API\r\n\r\n###new DDP(options)\r\n\r\nCreates a new DDP instance. After being constructed, the instance will\r\nestablish a connection with the DDP server and will try to maintain it open.\r\n\r\n####Arguments\r\n\r\n- `options` **object** *required*\r\n\r\nAvailable options are:\r\n\r\n- `endpoint` **string** *required*: the location of the websocket server. Its\r\n  format depends on the type of socket you are using.\r\n\r\n- `SocketConstructor` **function** *required*: the constructor function that\r\n  will be used to construct the socket. Meteor (currently the only DDP server\r\n  available) supports websockets and SockJS sockets.  So, practically speaking,\r\n  this means that on the browser you can use either the browser's native\r\n  WebSocket constructor or the SockJS constructor provided by the SockJS\r\n  library.  On the server you can use whichever library implements the\r\n  websocket protocol (e.g.  faye-websocket).\r\n\r\n####Returns\r\n\r\nA new DDP instance, which is also an `EventEmitter` instance.\r\n\r\n---\r\n\r\n###DDP.method(name, params)\r\n\r\nCalls a remote method.\r\n\r\n####Arguments\r\n\r\n- `name` **string** *required*: name of the method to call.\r\n\r\n- `params` **array** *required*: parameters to pass to the remote method. Pass\r\n  an empty array if you do not wish to pass any parameters.\r\n\r\n####Returns\r\n\r\nThe unique `id` (string) corresponding to the method call.\r\n\r\n---\r\n\r\n###DDP.sub(name, params)\r\n\r\nSubscribes to a server publication.\r\n\r\n####Arguments\r\n\r\n- `name` **string** *required*: name of the server publication.\r\n\r\n- `params` **array** *required*: parameters to pass to the server publish\r\n  function. Pass an empty array if you do not wish to pass any parameters.\r\n\r\n####Returns\r\n\r\nThe unique `id` (string) corresponding to the subscription call.\r\n\r\n---\r\n\r\n###DDP.unsub(id)\r\n\r\nUnsubscribes to a previously-subscribed server publication.\r\n\r\n####Arguments\r\n\r\n- `id` **string** *required*: id of the subscription.\r\n\r\n####Returns\r\n\r\nThe `id` corresponding to the subscription call (not of much use, but I return\r\nit for consistency).\r\n\r\n##Public events\r\n\r\n###Connection events\r\n\r\n- `connected`: emitted with no arguments when the DDP connection is\r\n  established.\r\n\r\n- `disconnected`: emitted with no arguments when the DDP connection drops.\r\n\r\n###Subscription events\r\n\r\nAll the following events are emitted with one argument, the parsed DDP message.\r\nFurther details can be found [on the DDP spec\r\npage](https://github.com/meteor/meteor/blob/devel/packages/ddp/DDP.md).\r\n\r\n- `ready`\r\n- `nosub`\r\n- `added`\r\n- `changed`\r\n- `removed`\r\n\r\n###Method events\r\n\r\nAll the following events are emitted with one argument, the parsed DDP message.\r\nFurther details can be found [on the DDP spec\r\npage](https://github.com/meteor/meteor/blob/devel/packages/ddp/DDP.md).\r\n\r\n- `result`\r\n- `updated`\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}